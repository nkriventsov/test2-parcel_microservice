services:
  # Контейнер - API (Dev)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_dev_container
    volumes:
      - .:/app
    ports:
      - "8000:8000"
      - "50102:50102"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - LOG_LEVEL="DEBUG"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - dev
    command: >
      sh -c "poetry install --with test,dev --no-root --no-cache &&
             poetry run alembic upgrade head &&
             poetry run uvicorn src.main:app --reload --host 0.0.0.0 --port 8000"


  # Контейнер - API (Prod)
  api-prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_prod_container
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - prod
    command: >
      poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4


  # Контейнер - Celery Worker (Dev и Prod)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_container
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    command: >
      poetry run celery -A src.core.celery_app.celery_instance worker --loglevel=DEBUG --pool=gevent
    profiles:
      - dev
      - prod

  # Контейнер - Flower (только Dev)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower_container
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    command: >
      sh -c "poetry run celery -A src.core.celery_app.celery_instance flower 
      --port=5555 
      --broker_api=http://mitmproxy:8080/api/ 
      --loglevel=debug"
    profiles:
      - dev

  mitmproxy:
    image: mitmproxy/mitmproxy
    container_name: mitmproxy_container
    ports:
      - "8080:8080" # Перехват запросов от Flower
    networks:
      - app_network
    command: mitmdump --listen-port 8080 --mode reverse:http://rabbitmq:15672/
    profiles:
      - dev

  # Контейнер - Test
  test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: test_container
    volumes:
      - .:/app
    environment:
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    command: ["poetry", "run", "pytest", "tests"]

  # Контейнер - PostgreSQL
  postgres:
    image: postgres:16
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5453:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Контейнер - RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq_container
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"  # Порт для RabbitMQ (используется клиентами)
      - "15672:15672" # Порт для RabbitMQ Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Контейнер - Redis
  redis:
    image: redis/redis-stack:latest
    container_name: redis_container
    restart: always
    ports:
      - "6739:6379"  # Порт для подключения Redis клиентов
      - "8001:8001"  # Порт для Redis Insight (веб-интерфейс)
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

networks:
  app_network: # Общая сеть для сервисов
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
